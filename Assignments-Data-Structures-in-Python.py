# -*- coding: utf-8 -*-
"""test0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GsonMhwlNiKfnjYuT2J9OFdf0uLW5Ogo
"""

# Question 1. write a code to reverse a string.
string = "Hello"

type(string)

string[::-1]

# Question 2. Write the code to count the number of vowels in a string

string = "Hello"
count = 0
for i in string:
    if i in "aeiou":
        count +=1

print(count)

# Question no 3. Write a code to check if given string is palindrome or not.

string = "madam"
if string == string[::-1]:
    print("Palindrome")
else:
    print("Not Palindrome")

#Question no 4. Write a code to check if two given strings are anagrams of eachh other.

string1 = "listen"
string2 = "silent"
if sorted(string1) == sorted(string2):
    print("Anagrams")
else:
    print("Not Anagrams")

# Question 5. Write a code to fill all occurences of a given substring within another string.

string1 = "Hello Amir"
string2 = "Hello"
string3 = "Hi"
print(string1.replace(string2, string3))

# Question no 6. Write a code to perform basic string compression using the counts of repeated characters.

str1 = "Hi I am Amir from Bihar"
str1.replace("r","")

#Question 7. write a code to determine if a string has all unique characgers.

string = "I am learning python"
if len(string) == len(set(string)):
    print("Unique")
else:
    print("Not Unique")

#Question 8. Write a code to convert a given string to uppercase or lowercase.

string = "I am learning python"
string.upper()

string.lower()

# Question 9. Write a code to count the number of words in a string.

string = "I am learning python"
print(len(string.split()))

#Question 10. Write a code to concatenate two strings without using the + operator.

string1 = "I am from"
string2 = "Bihar, a state in India"

list1 = list(string1)
list2 = list(string2)

list1.extend(list2)
result = "".join(list1)
print(result)  # Output should be: I am fromBihar, a state in India

# Question 11. Write a code to remove all occurrences of a specific element from a list.

my_list = [1,2,3,4,5,5,5,6,7,8,9,10]
[i for i in my_list if i != 5]

# Question 12. Implement a code to find the second largest number in a given list of integers.

my_list = [10,15,30,23,24,18,17,11,9,10]
my_list.sort()
print(my_list[-2])

# Question 13. Create a code to count the occurrences of each element in a list and return a dictionary with elements as keys and their counts as values.
my_list = ["Japan", "Rom", "Rom", "Japan","USA", "Rom"]
count = {}
for i in my_list:
    if i in count:
        count[i] += 1
    else:
        count[i] = 1
print(count)

# Question 14. Write a code to reverse a list in-place without using any built-in reverse function.

my_list = ["Japan", "Rom", "Rom", "Japan","USA", "Rom"]
my_list[::-1]

# Question 15. Implement a code to find and remove duplicates from a list while preserving the original order of elements.

my_list = [10, 10, 9, 8, 7, 4, 30, 15, 15, 30, 8, 8, 7]

unique_list = list(dict.fromkeys(my_list))

print(unique_list)

# Question 16. Create a code to check if a given list is sorted (either in ascending or descending order) or not.
# to check if the given list is sorted in ascending order
my_list = [10, 10, 9, 8, 7, 4, 30, 15, 15, 30, 8, 8, 7]
Ascending_order = sorted(my_list)
descending_order = Ascending_order[:: -1]
my_list == Ascending_order

# to check if the given list is sorted in descending order

my_list = [10, 10, 9, 8, 7, 4, 30, 15, 15, 30, 8, 8, 7]
Ascending_order = sorted(my_list)
descending_order = Ascending_order[:: -1]
my_list == descending_order

#Question 17. Write a code to merge two sorted lists into a single sorted list.

my_list1 = [123,125,204,103,95,78,250,90]
my_list2 = [10, 10, 9, 8, 7, 4, 30, 15, 15, 30, 8, 8, 7]

sorted_list = sorted(my_list1 + my_list2)
print(sorted_list)

# Question 18. Implement a code to find the intersection of two given lists.
my_list1 = [123,125,204,103,95,15,250,90]
my_list2 = [10, 10, 9, 8, 7, 4, 30, 15, 15, 30, 8, 8, 7]
intersection = set(my_list1) & set(my_list2)
print(intersection)

# Question 19. Create a code to find the union of two lists without duplicates.

my_list1 = [123,125,204,103,95,15,250,90]
my_list2 = [10, 10, 9, 8, 7, 4, 30, 15, 15, 30, 8, 8, 7]
union = set(my_list1) | set(my_list2)
print(union)

# Question 20. Write a code to shuffle a given list randomly without using any built-in shuffle function.

my_list1 = [123,125,204,103,95,15,250,90]
my_list1[0] = 125
my_list1[1] = 123
my_list1[3] = 90
my_list1[4] = 103
my_list1[5] = 250
my_list1[6] = 15
my_list1[7] = 90
print(my_list1)

# Write a code that takes two tuples as input and returns a new tuple containing elements that are common to both input tuples.

tup1 = input()
tup2 = input()
my_set1 = (set(tup1))
my_set2 = (set(tup2))
intersection = my_set1 & my_set2
print(tuple(intersection))

#Question 22. Create a code that prompts the user to enter two sets of integers separated by commas. Then, print the intersection of these two sets.

my_set1 = input()
my_set2 = input()
intersection = set(my_set1) & set(my_set2)
print(intersection)

# Question 23. Write a code to concatenate two tuples. The function should take two tuples as input and return a new tiuple containing elements from both input tuples.

tup1 = input()
tup2 = input()
output = set(tup1) | set(tup2)
print(output)

#Question 24. Develop a code that prompts the user to input two sets of strings. Then, print the elements that are present in the first set but not in the second set.

my_set1 = input()
my_set2 = input()
difference = set(my_set1) - set(my_set2)
print(difference)

#Question 25. Create a code that takes a tuple and two integers as input. The function should return a new tuple containing elements from the original tuple within the specified range of indices.
tup = input()
int1 = input()
int2 = input()

output = tup[int1:int2]
print(output)

# i could not understand this I need help with this question.

#Question 26. Write a code that prompts the user to input two sets of characters. Then, print the union of these two sets.

my_set1 = input()
my_set2 = input()
union = set(my_set1) | set(my_set2)
print(union)

#Question 27. Develop a code that takes a tuple of integers as input. The function should return the count of occurrences of the given element in the tuple.

tup1 = input()
count = 0
for i in tup1:
    if i in "3":
        count +=1

print(count)

# question 28. Create a code that defines two sets of integers. Then, print the union, intersection, and difference of these two sets.

my_set1 = {1,4,7,4,8,6,1,3,1,3}
my_set2 = {1,2,4,3,4,6,}
union = set(my_set1) | set(my_set2)
print(union)

intersection = set(my_set1) & set(my_set2)
print(intersection)

difference = set(my_set1) - set(my_set2)
print(difference)

#question 29. Write a code that takes a tiuple and an element as input. The function should return the count of occurrences of the given element in the tuple.

tup1 = input()
element = input()
count = 0
for i in tup1:
    if i == element:
        count +=1

print(count)

# question 30. Develop a code that prompts the user to input two sets of strings. Then, print the symmetric difference of these two sets.
my_set1 = input()
my_set2 = input()
symmetric_difference = set(my_set1) ^ set(my_set2)
print(symmetric_difference)

#Question 31. Write a code that takes a list of words as input and returns a dictionary where the keys are unique words and the values are the frequencies of those words in the input list.


input_str = input()
my_list = input_str.split()

count = {}

for word in my_list:
    if word in count:
        count[word] += 1
    else:
        count[word] = 1

# Print the dictionary of word frequencies
print(count)

#Question 32 write a code that takes two dictionaries as input and merges them into a single dictionary. If there are common keys, the values should be added together.
 # I need help with this question as well.
my_dict1 = input()
my_dict2 = input()
merged_dict = my_dict1.
print(merged_dict)

{"apple":2,"banana": 1,"rose": 1,"rose':1}

{"apple" : 3, "papaya":3, "rose":3}

def merge_dictionaries(dict1, dict2):
    merged_dict = dict1.copy()  # Make a copy of dict1 to preserve original data

    for key, value in dict2.items():
        if key in merged_dict:
            merged_dict[key] += value
        else:
            merged_dict[key] = value

    return merged_dict

# Example usage:
dict1 = {'apple': 3, 'banana': 1, 'cherry': 2}
dict2 = {'apple': 2, 'banana': 2, 'grape': 1}

merged_dict = merge_dictionaries(dict1, dict2)
print("Merged Dictionary:", merged_dict)

#Question 33. Write a code to access a value in a nested dictionary. The funcion should take the dictionary and a list of keys as input, and return the corresponding value. If any of the keys do not exist in the dictionary, the functiona should return none.
# please help me with question no 33, 34 and 35 these I don't understand at all.