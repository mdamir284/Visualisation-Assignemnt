# -*- coding: utf-8 -*-
"""test 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LmwJ1A14rDEWJSbkaBhAgIzmFegw9iyC
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio

## 1. Create a scatter plot using Matplotlib to visualize the relationship between two arrays, x and y for the given
#data.

x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y = [2, 4, 5, 7, 6, 8, 9, 10, 12, 13]

plt.scatter(x, y)
plt.show()

# 2. Generate a line plot to visualize the trend of values for the given data.

 data = np.array([3, 7, 9, 15, 22, 29, 35])
plt.plot(data)
plt.show()

# 3. Display a bar chart to represent the frequency of each item in the given array categories.

categories = ['A', 'B', 'C', 'D', 'E']
values = [25, 40, 30, 35, 20]

plt.bar(categories, values)
plt.show()

# 4. Create a histogram to visualize the distribution of values in the array data.

data = np.random.normal(0, 1, 1000)
plt.hist(data)
plt.show()

#5. Show a pie chart to represent the percentage distribution of different sections in the array `sections`.

sections = ['Section A', 'Section B', 'Section C', 'Section D']
sizes = [25, 30, 15, 30]

plt.pie(sizes, labels=sections)
plt.show()

# SEABORN ASSIGNMENT:

# 1. Create a scatter plot to visualize the relationship between two variables, by generating a synthetic dataset.

x = np.random.normal(0, 1, 100)
y = np.random.normal(0, 1, 100)

sns.scatterplot(x = x, y = y)
plt.show()

#  2.Generate a dataset of random numbers. Visualize the distribution of a numerical variable

data = np.random.normal(loc=0, scale=1, size=1000)
plt.figure(figsize=(12, 6))
plt.hist(data, bins=30, alpha=0.7, color='blue')
plt.title('Histogram of Random Data')
plt.xlabel('Value')
plt.ylabel('Frequency')

plt.show()

# 3.Create a dataset representing categories and their corresponding values. Compare different categories
# based on numerical values.

df = pd.DataFrame({'Category': ['A', 'B', 'C', 'D'], 'Value': [10, 20, 30, 40]})
sns.barplot(x='Category', y='Value', data=df)

# 4. Generate a dataset with categories and numerical values. Visualize the distribution of a numerical
# variable across different categories.

df = sns.load_dataset('tips')
sns.lineplot(x='day', y='total_bill', data=df)

# 5. Generate a synthetic dataset with correlated features. Visualize the correlation matrix of a dataset using a
#heatmap.

df = pd.DataFrame(np.random.rand(10, 5), columns=['A', 'B', 'C', 'D', 'E'])
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')

# PLOTLY ASSIGNMENT

# 1. Using the given dataset, to generate a 3D scatter plot to visualize the distribution of data points in a threedimensional space.

np.random.seed(30)
data = {
    'X': np.random.uniform(-10, 10, 300),
    'Y': np.random.uniform(-10, 10, 300),
    'Z': np.random.uniform(-10, 10, 300)
}
df = pd.DataFrame(data)

fig = px.scatter_3d(df, x='X', y='Y', z='Z')
fig.show()

# 2. Using the Student Grades, create a violin plot to display the distribution of scores across different grade categories.

np.random.seed(15)
data = {
    'Grade': np.random.choice(['A', 'B', 'C', 'D', 'F'], 200),
    'Score': np.random.randint(50, 100, 200)
}
df = pd.DataFrame(data)

fig = px.violin(df, y='Score', color='Grade', box=True)
fig.show()

#1. Using the sales data, generate a heatmap to visualize the variation in sales across different months and days.

np.random.seed(20)
data = {
    'Month': np.random.choice(['Jan', 'Feb', 'Mar', 'Apr', 'May'], 100),
    'Day': np.random.choice(range(1, 31), 100),
    'Sales': np.random.randint(1000, 5000, 100)
}
df = pd.DataFrame(data)

fig = px.imshow(df.pivot_table(index='Month', columns='Day', values='Sales'), color_continuous_scale='Viridis')
fig.show()

# 3. Using the sales data, generate a heatmap to visualize the variation in sales across different months and days.

np.random.seed(20)
data = {
    'Month': np.random.choice(['Jan', 'Feb', 'Mar', 'Apr', 'May'], 100),
    'Day': np.random.choice(range(1, 31), 100),
    'Sales': np.random.randint(1000, 5000, 100)
}
df = pd.DataFrame(data)

fig = px.imshow(df.pivot_table(index='Month', columns='Day', values='Sales'), color_continuous_scale='Viridis')
fig.show()

# Using the given x and y data, generate a 3D surface plot to visualize the function z = sin(​sqrt(​x^​2+​y^​2))

x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x**2 + y**2))
data = {
    'X': x.flatten(),
    'Y': y.flatten(),
    'Z': z.flatten()
}
df = pd.DataFrame(data)

fig = px.scatter_3d(df, x='X', y='Y', z='Z')
fig.show()

# 5. Using the given dataset, create a bubble chart to represent each country's population (y-axis), GDP (xaxis), and bubble size proportional to the population.

np.random.seed(25)
data = {
    'Country': ['USA', 'Canada', 'UK',
'Germany', 'France'],
    'Population':
np.random.randint(100, 1000, 5),
    'GDP': np.random.randint(500, 2000,
5)
}
df = pd.DataFrame(data)

fig = px.scatter(df, x='GDP', y='Population', size='Population',
color='Country', hover_name='Country')
fig.show()

# BOKEH ASSIGNMENT

import bokeh.io
import bokeh.plotting
bokeh.io.output_notebook()

from bokeh.sampledata.iris import flowers
from bokeh.plotting import figure, output_file, show

pip install bokeh

#1.Create a Bokeh plot displaying a sine wave. Set x-values from 0 to 10 and y-values as the sine of x.

x = np.linspace(0, 10, 100)
y = np.sin(x)

p = figure(title="Sine Wave", x_axis_label="x", y_axis_label="y")
p.line(x, y)
show(p)

# 2.Create a Bokeh scatter plot using randomly generated x and y values. Use different sizes and colors for the markers based on the 'sizes' and 'colors' columns.

x = np.random.rand(100)
y = np.random.rand(100)
sizes = np.random.rand(100) * 10
colors = np.random.choice(["red", "green", "blue", "orange", "purple"], 100)


p = figure(title="Scatter Plot", x_axis_label="x", y_axis_label="y")
p.circle(x, y, size=sizes, color = colors)
show(p)

# 3. Generate a Bokeh bar chart representing the counts of different fruits using the following dataset.

fruits = ['Apples', 'Oranges', 'Bananas', 'Pears']
counts = [20, 25, 30, 35]
p = figure(x_range=fruits, title="Fruit Counts", x_axis_label="Fruit", y_axis_label="Count")
p.vbar(x=fruits, top=counts, width=0.5)
show(p)

#4.  Create a Bokeh histogram to visualize the distribution of the given data.

data_hist = np.random.randn(1000)
hist, edges = np.histogram(data_hist, bins=30)

p = figure(title="Histogram", x_axis_label="Value", y_axis_label="Frequency")
p.quad(top=hist, bottom=0, left=edges[:-1], right=edges[1:], fill_color="green", line_color="red")
show(p)

# 5.  Create a Bokeh heatmap using the provided dataset.

data_heatmap = np.random.rand(10, 10)
x = np.linspace(0, 1, 10)
y = np.linspace(0, 1, 10)
xx, yy = np.meshgrid(x, y)

output_file("line.html")
p = figure(title = "line chart")
p.line(xx, yy)
show(p)


# I need help with this.